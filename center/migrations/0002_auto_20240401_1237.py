# Generated by Django 4.2.2 on 2024-04-01 07:37
from django.contrib.auth.models import User
from django.contrib.auth.models import Group

from django.db import migrations
# Подключаем модуль для работы с датой/веременем
from datetime import datetime, timedelta
# Подключаем модуль генерации случайных чисел
import random

# Получение случайной даты в заданном диапазоне дат
#start_dt = datetime.strptime("01.01.1963", "%d.%m.%Y")
#end_dt = datetime.strptime("01.01.2001", "%d.%m.%Y")
#print(get_random_date(start_dt, end_dt))
def get_random_date(start, end):
    delta = end - start
    return start + timedelta(random.randint(0, delta.days))

#data_rozhdeniya = datetime.strptime("28.12.1969", "%d.%m.%Y")
#print(get_iin(data_rozhdeniya, "М"))

# Получение случайного адреса (k - включает ли адрес квартиру)
def get_adres(k):
    ulica = ["ул. Архитектурная", 
            "ул. Баженова", 
            "ул. Ботаническая", 
            "ул. Вавилова", 
            "ул. Воинов-интернационалистов", 
            "ул. Гастелло", 
            "ул. Гончарная", 
            "ул. Грибоедова", 
            "ул. Дружбы", 
            "ул. Ержанова",
            "ул. Ермекова",
            "ул. Заводская", 
            "ул. Защитная", 
            "ул. Ипподромная", 
            "ул. Караванная", 
            "ул. Карла Маркса", 
            "ул. Кирпичная", 
            "ул. Кооперации", 
            "ул. Космонавтов", 
            "ул. Курмангазы", 
            "ул. Луговая", 
            "ул. Луначарского", 
            "ул. Маяковского", 
            "ул. Металлистов", 
            "ул. Мира", 
            "ул. Некрасова", 
            "ул. Новоселов",
            "ул. Олимпийская", 
            "ул. Победы", 
            "ул. Привокзальная", 
            "ул. Садовая", 
            "ул. Степная", 
            "ул. Стремянная", 
            "ул. Университетская", 
            "ул. Чехова", 
            "ул. Чайковского", 
            "ул. Энтузиастов",
            "ул. Юбилейная",
            "ул. Южная"
        ]
    if (k==True):
        adres = random.choice(ulica) + ", " + str(random.randint(1, 200)) + "-" + str(random.randint(1, 200)) 
    else:
        adres = random.choice(ulica) + ", " + str(random.randint(1, 200)) 
    return adres

# Получение случайного телефона
def get_telefon():
    if random.randint(0, 1) == 1:
        telefon = "+7-901-"
    else:
        telefon = "+7-902-" 
    telefon = telefon + str(random.randint(0, 9)) + str(random.randint(0, 9)) + str(random.randint(0, 9)) + "-" + str(random.randint(0, 9)) + str(random.randint(0, 9)) + str(random.randint(0, 9)) + str(random.randint(0, 9)) 
    return telefon

# Добавить Клиенты
def insert_client(apps, param):
    Client = apps.get_model("center", "Client")
    client = Client()
    client.full_name = param[0]
    client.birthday = param[1]
    client.sex = param[2]
    client.address = param[3]
    client.phone = param[4]
    client.save()
    return 

# Добавить Диагноз
def insert_diagnosis(apps, param):
    Diagnosis = apps.get_model("center", "Diagnosis")
    diagnosis = Diagnosis()
    diagnosis.date_diagnosis = param[0]
    diagnosis.client_id = param[1]
    diagnosis.diagnosis_details = param[2]
    diagnosis.save()
    return 

# Найти или Добавить Тип услуги
global dict_kind
dict_kind = {}

def get_kind(apps, val):   
    # Поиск 
    if val in dict_kind.values():
        for k, v in dict_kind.items():
            if v == val:
                return k    
    else:
        Kind = apps.get_model("center", "Kind")
        kind = Kind()
        kind.kind_title = val
        kind.save()
        dict_kind[kind.id] = kind.kind_title
        return kind.id

# Добавить Услуги
def insert_service(apps, param):
    Service = apps.get_model("center", "Service")
    service = Service()
    service.kind_id = param[0]
    service.service_title = param[1]
    service.price = param[2]
    service.save()
    return 

# Найти или Добавить Категория врачей (вторая, первая и высшая)
global dict_category
dict_category = {}

def get_category(apps, val):   
    # Поиск 
    if val in dict_category.values():
        for k, v in dict_category.items():
            if v == val:
                return k    
    else:
        Category = apps.get_model("center", "Category")
        category = Category()
        category.category_title = val
        category.save()
        dict_category[category.id] = category.category_title
        return category.id

# Найти или Добавить Отделение (травматология, хирургия...)
global dict_branch
dict_branch = {}

def get_branch(apps, val):   
    # Поиск 
    if val in dict_branch.values():
        for k, v in dict_branch.items():
            if v == val:
                return k    
    else:
        Branch = apps.get_model("center", "Branch")
        branch = Branch()
        branch.branch_title = val
        branch.save()
        dict_branch[branch.id] = branch.branch_title
        return branch.id

# Найти или Добавить Специализация врачей (кардиолог, отоларинголог, терапевт)
global dict_specialization
dict_specialization = {}

def get_specialization(apps, val):   
    # Поиск 
    if val in dict_specialization.values():
        for k, v in dict_specialization.items():
            if v == val:
                return k    
    else:
        Specialization = apps.get_model("center", "Specialization")
        specialization = Specialization()
        specialization.specialization_title = val
        specialization.save()
        dict_specialization[specialization.id] = specialization.specialization_title
        return specialization.id

# Добавить Врача
def insert_doctor(apps, param):
    Doctor = apps.get_model("center", "Doctor")
    doctor = Doctor()
    doctor.full_name = param[0]
    doctor.category_id = param[1]
    doctor.branch_id = param[2]
    doctor.specialization_id = param[3]
    doctor.user_id = param[4]
    doctor.save()
    return 

# Добавить Расписание приема пациентов
def insert_schedule(apps, param):
    Schedule = apps.get_model("center", "Schedule")
    schedule = Schedule()
    schedule.week_day = param[0]
    schedule.time_schedule = param[1]
    schedule.doctor_id = param[2]
    schedule.save()
    return 

# Добавить Планируемые посещения
def insert_visit(apps, param):
    Visit = apps.get_model("center", "Visit")
    visit = Visit()
    visit.date_visit = param[0]
    visit.client_id = param[1]
    visit.doctor_id = param[2]
    visit.visit_details = param[3]
    visit.save()
    return 

# Добавить Продажу услуги
def insert_sale(apps, param):
    Sale = apps.get_model("center", "Sale")
    sale = Sale()
    sale.visit_id = param[0]
    sale.service_id = param[1]
    sale.price = param[2]
    sale.save()
    return 


# Начальные данные 
def new_data(apps, schema_editor):
    try:
        # Суперпользователь id=1
        user = User.objects.create_superuser(username='root',
        email='root@mail.ru',
        first_name='Алексей', 
        last_name='Дюднев',
        password='SsNn5678+-@')
        print("Суперпользователь создан")

        # Простые пользователи () id2-11
        user = User.objects.create_user(username='user1', password='Uu0066+-', email='user1@mail.ru', first_name='Ксения', last_name='Шевченко')
        user = User.objects.create_user(username='user2', password='Uu0066+-', email='user2@mail.ru', first_name='Алексей', last_name='Шеховцов')
        user = User.objects.create_user(username='user3', password='Uu0066+-', email='user3@mail.ru', first_name='Ксения', last_name='Ланец')
        user = User.objects.create_user(username='user4', password='Uu0066+-', email='user4@mail.ru', first_name='Екатерина', last_name='Яковлева')
        user = User.objects.create_user(username='user5', password='Uu0066+-', email='user5@mail.ru', first_name='Дмитрий', last_name='Чумаков')
        user = User.objects.create_user(username='user6', password='Uu0066+-', email='user6@mail.ru', first_name='Ульяна', last_name='Колосова')
        user = User.objects.create_user(username='user7', password='Uu0066+-', email='user7@mail.ru', first_name='Кристина', last_name='Титова')
        user = User.objects.create_user(username='user8', password='Uu0066+-', email='user8@mail.ru', first_name='Глеб', last_name='Комиссаров')
        user = User.objects.create_user(username='user9', password='Uu0066+-', email='user9@mail.ru', first_name='Михаил', last_name='Кириенко')
        user = User.objects.create_user(username='user10', password='Uu0066+-', email='user10@mail.ru', first_name='Рената', last_name='Ким')        
        print("Созданы простые пользователи")

        # Добавить Клиента
        parameters = ["Соловьев Алексей Георгиевич", get_random_date(datetime.strptime("01.09.1963", "%d.%m.%Y"), datetime.strptime("31.08.2006", "%d.%m.%Y")), "М", get_adres(True), get_telefon()]
        insert_client(apps, parameters)
        parameters = ["Тихоненко Максим Васильевич", get_random_date(datetime.strptime("01.09.1963", "%d.%m.%Y"), datetime.strptime("31.08.2006", "%d.%m.%Y")), "М", get_adres(True), get_telefon()]
        insert_client(apps, parameters)
        parameters = ["Девятов Владислав Юрьевич", get_random_date(datetime.strptime("01.09.1963", "%d.%m.%Y"), datetime.strptime("31.08.2006", "%d.%m.%Y")), "М", get_adres(True), get_telefon()]
        insert_client(apps, parameters)
        parameters = ["Кеняйкин Павел Витальевич", get_random_date(datetime.strptime("01.09.1963", "%d.%m.%Y"), datetime.strptime("31.08.2006", "%d.%m.%Y")), "М", get_adres(True), get_telefon()]
        insert_client(apps, parameters)
        parameters = ["Емельянов Евгений Анатольевич", get_random_date(datetime.strptime("01.09.1963", "%d.%m.%Y"), datetime.strptime("31.08.2006", "%d.%m.%Y")), "М", get_adres(True), get_telefon()]
        insert_client(apps, parameters)
        parameters = ["Юминов Алексей Владимирович", get_random_date(datetime.strptime("01.09.1963", "%d.%m.%Y"), datetime.strptime("31.08.2006", "%d.%m.%Y")), "М", get_adres(True), get_telefon()]
        insert_client(apps, parameters)
        parameters = ["Лоенко Кирилл Евгеньевич", get_random_date(datetime.strptime("01.09.1963", "%d.%m.%Y"), datetime.strptime("31.08.2006", "%d.%m.%Y")), "М", get_adres(True), get_telefon()]
        insert_client(apps, parameters)
        parameters = ["Ким Николай Алексеевич", get_random_date(datetime.strptime("01.09.1963", "%d.%m.%Y"), datetime.strptime("31.08.2006", "%d.%m.%Y")), "М", get_adres(True), get_telefon()]
        insert_client(apps, parameters)
        parameters = ["Дейниченко Антон Анатольевич", get_random_date(datetime.strptime("01.09.1963", "%d.%m.%Y"), datetime.strptime("31.08.2006", "%d.%m.%Y")), "М", get_adres(True), get_telefon()]
        insert_client(apps, parameters)
        parameters = ["Давыдов Евгений Сергеевич", get_random_date(datetime.strptime("01.09.1963", "%d.%m.%Y"), datetime.strptime("31.08.2006", "%d.%m.%Y")), "М", get_adres(True), get_telefon()]
        insert_client(apps, parameters)
        parameters = ["Фильченко Лидия Владимировна", get_random_date(datetime.strptime("01.09.1963", "%d.%m.%Y"), datetime.strptime("31.08.2006", "%d.%m.%Y")), "Ж", get_adres(True), get_telefon()]
        insert_client(apps, parameters)
        parameters = ["Стародубцева Алена Анатольевна", get_random_date(datetime.strptime("01.09.1963", "%d.%m.%Y"), datetime.strptime("31.08.2006", "%d.%m.%Y")), "Ж", get_adres(True), get_telefon()]
        insert_client(apps, parameters)
        parameters = ["Петренко Дина Андреевна", get_random_date(datetime.strptime("01.09.1963", "%d.%m.%Y"), datetime.strptime("31.08.2006", "%d.%m.%Y")), "Ж", get_adres(True), get_telefon()]
        insert_client(apps, parameters)
        parameters = ["Пирекова Надежда Александровна", get_random_date(datetime.strptime("01.09.1963", "%d.%m.%Y"), datetime.strptime("31.08.2006", "%d.%m.%Y")), "Ж", get_adres(True), get_telefon()]
        insert_client(apps, parameters)
        parameters = ["Кузьмина Анна Александровна", get_random_date(datetime.strptime("01.09.1963", "%d.%m.%Y"), datetime.strptime("31.08.2006", "%d.%m.%Y")), "Ж", get_adres(True), get_telefon()]
        insert_client(apps, parameters)
        parameters = ["Гладышева Татьяна Олеговна", get_random_date(datetime.strptime("01.09.1963", "%d.%m.%Y"), datetime.strptime("31.08.2006", "%d.%m.%Y")), "Ж", get_adres(True), get_telefon()]
        insert_client(apps, parameters)
        parameters = ["Черепанова Анастасия Вячеславовна", get_random_date(datetime.strptime("01.09.1963", "%d.%m.%Y"), datetime.strptime("31.08.2006", "%d.%m.%Y")), "Ж", get_adres(True), get_telefon()]
        insert_client(apps, parameters)
        parameters = ["Кузьменко Юлия Николаевна", get_random_date(datetime.strptime("01.09.1963", "%d.%m.%Y"), datetime.strptime("31.08.2006", "%d.%m.%Y")), "Ж", get_adres(True), get_telefon()]
        insert_client(apps, parameters)
        parameters = ["Нефёдкина Асия Валерьевна", get_random_date(datetime.strptime("01.09.1963", "%d.%m.%Y"), datetime.strptime("31.08.2006", "%d.%m.%Y")), "Ж", get_adres(True), get_telefon()]
        insert_client(apps, parameters)
        parameters = ["Туркина Диана Дмитриевна", get_random_date(datetime.strptime("01.09.1963", "%d.%m.%Y"), datetime.strptime("31.08.2006", "%d.%m.%Y")), "Ж", get_adres(True), get_telefon()]
        insert_client(apps, parameters)
        print("Созданы Клиенты")

        # Добавить Диагноз
        parameters = [datetime.now() - timedelta(days=20) + timedelta(minutes=random.randint(1, 360)), 1, "Простуда, ОРВИ"]
        insert_diagnosis(apps, parameters)
        parameters = [datetime.now() - timedelta(days=20) + timedelta(minutes=random.randint(1, 360)), 2, "Повышенное давление"]
        insert_diagnosis(apps, parameters)
        parameters = [datetime.now() - timedelta(days=20) + timedelta(minutes=random.randint(1, 360)), 3, "Сердечная недостаточность"]
        insert_diagnosis(apps, parameters)
        parameters = [datetime.now() - timedelta(days=20) + timedelta(minutes=random.randint(1, 360)), 4, "Анемия"]
        insert_diagnosis(apps, parameters)
        parameters = [datetime.now() - timedelta(days=20) + timedelta(minutes=random.randint(1, 360)), 5, "Гастрит"]
        insert_diagnosis(apps, parameters)
        parameters = [datetime.now() - timedelta(days=19) + timedelta(minutes=random.randint(1, 360)), 6, "Простуда, ОРВИ"]
        insert_diagnosis(apps, parameters)
        parameters = [datetime.now() - timedelta(days=19) + timedelta(minutes=random.randint(1, 360)), 7, "Повышенное давление"]
        insert_diagnosis(apps, parameters)
        parameters = [datetime.now() - timedelta(days=19) + timedelta(minutes=random.randint(1, 360)), 8, "Сердечная недостаточность"]
        insert_diagnosis(apps, parameters)
        parameters = [datetime.now() - timedelta(days=19) + timedelta(minutes=random.randint(1, 360)), 9, "Анемия"]
        insert_diagnosis(apps, parameters)
        parameters = [datetime.now() - timedelta(days=19) + timedelta(minutes=random.randint(1, 360)), 10, "Гастрит"]
        insert_diagnosis(apps, parameters)
        parameters = [datetime.now() - timedelta(days=18) + timedelta(minutes=random.randint(1, 360)), 11, "Простуда, ОРВИ"]
        insert_diagnosis(apps, parameters)
        parameters = [datetime.now() - timedelta(days=18) + timedelta(minutes=random.randint(1, 360)), 12, "Повышенное давление"]
        insert_diagnosis(apps, parameters)
        parameters = [datetime.now() - timedelta(days=18) + timedelta(minutes=random.randint(1, 360)), 13, "Сердечная недостаточность"]
        insert_diagnosis(apps, parameters)
        parameters = [datetime.now() - timedelta(days=18) + timedelta(minutes=random.randint(1, 360)), 14, "Анемия"]
        insert_diagnosis(apps, parameters)
        parameters = [datetime.now() - timedelta(days=18) + timedelta(minutes=random.randint(1, 360)), 15, "Гастрит"]
        insert_diagnosis(apps, parameters)
        parameters = [datetime.now() - timedelta(days=17) + timedelta(minutes=random.randint(1, 360)), 16, "Простуда, ОРВИ"]
        insert_diagnosis(apps, parameters)
        parameters = [datetime.now() - timedelta(days=17) + timedelta(minutes=random.randint(1, 360)), 17, "Повышенное давление"]
        insert_diagnosis(apps, parameters)
        parameters = [datetime.now() - timedelta(days=17) + timedelta(minutes=random.randint(1, 360)), 18, "Сердечная недостаточность"]
        insert_diagnosis(apps, parameters)
        parameters = [datetime.now() - timedelta(days=17) + timedelta(minutes=random.randint(1, 360)), 19, "Анемия"]
        insert_diagnosis(apps, parameters)
        parameters = [datetime.now() - timedelta(days=17) + timedelta(minutes=random.randint(1, 360)), 20, "Гастрит"]
        insert_diagnosis(apps, parameters)
        parameters = [datetime.now() - timedelta(days=16) + timedelta(minutes=random.randint(1, 360)), 1, "Заболевание желудочно кишечного тракта"]
        insert_diagnosis(apps, parameters)
        parameters = [datetime.now() - timedelta(days=16) + timedelta(minutes=random.randint(1, 360)), 2, "Заболевание щитовидной железы"]
        insert_diagnosis(apps, parameters)
        parameters = [datetime.now() - timedelta(days=16) + timedelta(minutes=random.randint(1, 360)), 3, "Заболевание желудочно кишечного тракта"]
        insert_diagnosis(apps, parameters)
        parameters = [datetime.now() - timedelta(days=16) + timedelta(minutes=random.randint(1, 360)), 4, "Нарушение работы кровеносной системы"]
        insert_diagnosis(apps, parameters)
        parameters = [datetime.now() - timedelta(days=16) + timedelta(minutes=random.randint(1, 360)), 5, "Сахарный диабет"]
        print("Созданы Диагнозы")

        # Услуги
        parameters = [get_kind(apps, "Прием врача"), "Прием врача-кардиолога", 1000]
        insert_service(apps, parameters)
        
        parameters = [get_kind(apps, "Прием врача"), "Прием врача-эндокринолога", 1000]
        insert_service(apps, parameters)

        parameters = [get_kind(apps, "Прием врача"), "Прием врача-терапевта", 1000]
        insert_service(apps, parameters)

        parameters = [get_kind(apps, "Прием врача"), "Прием врача-уролога", 1000]
        insert_service(apps, parameters)

        parameters = [get_kind(apps, "Прием врача"), "Прием врача-офтальмолога", 1000]
        insert_service(apps, parameters)

        parameters = [get_kind(apps, "Прием врача"), "Прием врача-травматолог", 1000]
        insert_service(apps, parameters)

        parameters = [get_kind(apps, "Прием врача"), "Прием врача-гинеколога", 1000]
        insert_service(apps, parameters)

        parameters = [get_kind(apps, "Прием врача"), "Прием врача-хирурга", 1000]
        insert_service(apps, parameters)

        parameters = [get_kind(apps, "Процедурный кабинет"), "Внутривенные иньекции", 250]
        insert_service(apps, parameters)

        parameters = [get_kind(apps, "Процедурный кабинет"), "Подкожные иньекции", 200]
        insert_service(apps, parameters)

        parameters = [get_kind(apps, "Процедурный кабинет"), "Забор крови из пальца", 160]
        insert_service(apps, parameters)

        parameters = [get_kind(apps, "Процедурный кабинет"), "Забор крови из вены", 200]
        insert_service(apps, parameters)

        parameters = [get_kind(apps, "Функциональная диагностика"), "Электрокардиограмма ЭКГ", 800]
        insert_service(apps, parameters)

        parameters = [get_kind(apps, "Функциональная диагностика"), "Электроэнцефалография компьютерная (ЭЭГ)", 900]
        insert_service(apps, parameters)

        parameters = [get_kind(apps, "Функциональная диагностика"), "Спирография", 900]
        insert_service(apps, parameters)

        parameters = [get_kind(apps, "Физиолечение"), "Гальванизация", 240]
        insert_service(apps, parameters)

        parameters = [get_kind(apps, "Физиолечение"), "Лекарственный электрофорез ", 250]
        insert_service(apps, parameters)

        parameters = [get_kind(apps, "Физиолечение"), "УВЧ-терапия", 250]
        insert_service(apps, parameters)

        parameters = [get_kind(apps, "Физиолечение"), "Фонофорез", 280]
        insert_service(apps, parameters)

        parameters = [get_kind(apps, "Ультразвуковое исследование"), "УЗИ одного изолированного органа", 800]
        insert_service(apps, parameters)

        parameters = [get_kind(apps, "Ультразвуковое исследование"), "УЗИ органов брюшной полости ", 1150]
        insert_service(apps, parameters)

        parameters = [get_kind(apps, "Ультразвуковое исследование"), "УЗИ сердца", 1500]
        insert_service(apps, parameters)

        print("Созданы Услуги")

        # Врачи 
        parameters = ["Шевченко Ксения Александровна", get_category(apps, "Вторая"), get_branch(apps, "Терапевтическое отделение"), get_specialization(apps, "Терапевт"), 2]
        insert_doctor(apps, parameters)
        parameters = ["Понедельник", "09:00-13:00", 1]
        insert_schedule(apps, parameters)
        parameters = ["Вторник", "09:00-13:00", 1]
        insert_schedule(apps, parameters)
        parameters = ["Среда", "09:00-13:00", 1]
        insert_schedule(apps, parameters)
        parameters = ["Четверг", "09:00-13:00", 1]
        insert_schedule(apps, parameters)
        parameters = ["Пятница", "09:00-13:00", 1]
        insert_schedule(apps, parameters)

        parameters = ["Шеховцов Алексей Сергеевич", get_category(apps, "Первая"), get_branch(apps, "Терапевтическое отделение"), get_specialization(apps, "Травматолог"), 3]
        insert_doctor(apps, parameters)
        parameters = ["Понедельник", "09:00-13:00", 2]
        insert_schedule(apps, parameters)
        parameters = ["Вторник", "09:00-13:00", 2]
        insert_schedule(apps, parameters)
        parameters = ["Среда", "09:00-13:00", 2]
        insert_schedule(apps, parameters)
        parameters = ["Четверг", "09:00-13:00", 2]
        insert_schedule(apps, parameters)
        parameters = ["Пятница", "09:00-13:00", 2]
        insert_schedule(apps, parameters)

        parameters = ["Ланец Ксения Денисовна", get_category(apps, "Высшая"), get_branch(apps, "Терапевтическое отделение"), get_specialization(apps, "Кардиолог"), 4]
        insert_doctor(apps, parameters)
        parameters = ["Понедельник", "14:00-17:00", 3]
        insert_schedule(apps, parameters)
        parameters = ["Вторник", "14:00-17:00", 3]
        insert_schedule(apps, parameters)
        parameters = ["Среда", "14:00-17:00", 3]
        insert_schedule(apps, parameters)
        parameters = ["Четверг", "14:00-17:00", 3]
        insert_schedule(apps, parameters)
        parameters = ["Пятница", "14:00-17:00", 3]
        insert_schedule(apps, parameters)

        parameters = ["Яковлева Екатерина Викторовна", get_category(apps, "Вторая"), get_branch(apps, "Лечебно-диагностическое отделение "), get_specialization(apps, "Кардиолог"), 5]
        insert_doctor(apps, parameters)
        parameters = ["Понедельник", "09:00-13:00", 4]
        insert_schedule(apps, parameters)
        parameters = ["Вторник", "09:00-13:00", 4]
        insert_schedule(apps, parameters)
        parameters = ["Среда", "09:00-13:00", 4]
        insert_schedule(apps, parameters)
        parameters = ["Четверг", "09:00-13:00", 4]
        insert_schedule(apps, parameters)
        parameters = ["Пятница", "09:00-13:00", 4]
        insert_schedule(apps, parameters)

        parameters = ["Чумаков Дмитрий Андреевич", get_category(apps, "Первая"), get_branch(apps, "Лечебно-диагностическое отделение "), get_specialization(apps, "Травматолог"), 6]
        insert_doctor(apps, parameters)
        parameters = ["Понедельник", "09:00-13:00", 5]
        insert_schedule(apps, parameters)
        parameters = ["Вторник", "09:00-13:00", 5]
        insert_schedule(apps, parameters)
        parameters = ["Среда", "09:00-13:00", 5]
        insert_schedule(apps, parameters)
        parameters = ["Четверг", "09:00-13:00", 5]
        insert_schedule(apps, parameters)
        parameters = ["Пятница", "09:00-13:00", 5]
        insert_schedule(apps, parameters)

        parameters = ["Колосова Ульяна Игоревна", get_category(apps, "Высшая"), get_branch(apps, "Лечебно-диагностическое отделение "), get_specialization(apps, "Офтальмолог"), 7]
        insert_doctor(apps, parameters)
        parameters = ["Понедельник", "14:00-17:00", 6]
        insert_schedule(apps, parameters)
        parameters = ["Вторник", "14:00-17:00", 6]
        insert_schedule(apps, parameters)
        parameters = ["Среда", "14:00-17:00", 6]
        insert_schedule(apps, parameters)
        parameters = ["Четверг", "14:00-17:00", 6]
        insert_schedule(apps, parameters)
        parameters = ["Пятница", "14:00-17:00", 6]
        insert_schedule(apps, parameters)

        parameters = ["Титова Кристина Витальевна", get_category(apps, "Вторая"), get_branch(apps, "Физиотерапевтическое отделение"), get_specialization(apps, "Гинеколог"), 8]
        insert_doctor(apps, parameters)
        parameters = ["Понедельник", "09:00-13:00", 7]
        insert_schedule(apps, parameters)
        parameters = ["Вторник", "09:00-13:00", 7]
        insert_schedule(apps, parameters)
        parameters = ["Среда", "09:00-13:00", 7]
        insert_schedule(apps, parameters)
        parameters = ["Четверг", "09:00-13:00", 7]
        insert_schedule(apps, parameters)
        parameters = ["Пятница", "09:00-13:00", 7]
        insert_schedule(apps, parameters)

        parameters = ["Комиссаров Глеб Сергеевич", get_category(apps, "Первая"), get_branch(apps, "Физиотерапевтическое отделение"), get_specialization(apps, "Уролог"), 9]
        insert_doctor(apps, parameters)
        parameters = ["Понедельник", "09:00-13:00", 8]
        insert_schedule(apps, parameters)
        parameters = ["Вторник", "09:00-13:00", 8]
        insert_schedule(apps, parameters)
        parameters = ["Среда", "09:00-13:00", 8]
        insert_schedule(apps, parameters)
        parameters = ["Четверг", "09:00-13:00", 8]
        insert_schedule(apps, parameters)
        parameters = ["Пятница", "09:00-13:00", 8]
        insert_schedule(apps, parameters)

        parameters = ["Кириенко Михаил Сергеевич", get_category(apps, "Высшая"), get_branch(apps, "Физиотерапевтическое отделение"), get_specialization(apps, "Хирург"), 10]
        insert_doctor(apps, parameters)
        parameters = ["Понедельник", "14:00-17:00", 9]
        insert_schedule(apps, parameters)
        parameters = ["Вторник", "14:00-17:00", 9]
        insert_schedule(apps, parameters)
        parameters = ["Среда", "14:00-17:00", 9]
        insert_schedule(apps, parameters)
        parameters = ["Четверг", "14:00-17:00", 9]
        insert_schedule(apps, parameters)
        parameters = ["Пятница", "14:00-17:00", 9]
        insert_schedule(apps, parameters)

        parameters = ["Ким Рената Владимировна", get_category(apps, "Высшая"), get_branch(apps, "Отделение профилактики"), get_specialization(apps, "Терапевт"), 11]
        insert_doctor(apps, parameters)
        parameters = ["Понедельник", "14:00-17:00", 10]
        insert_schedule(apps, parameters)
        parameters = ["Вторник", "14:00-17:00", 10]
        insert_schedule(apps, parameters)
        parameters = ["Среда", "14:00-17:00", 10]
        insert_schedule(apps, parameters)
        parameters = ["Четверг", "14:00-17:00", 10]
        insert_schedule(apps, parameters)
        parameters = ["Пятница", "14:00-17:00", 10]
        insert_schedule(apps, parameters)

        print("Созданы Врачи и расписание")

        # Планируемые посещения и услуги
        parameters = [datetime.now() - timedelta(days=20) + timedelta(minutes=random.randint(1, 360)), 1, 1, "Простуда, ОРВИ"]
        insert_visit(apps, parameters)
        parameters = [1, 1, 1000]
        insert_sale(apps, parameters)

        parameters = [datetime.now() - timedelta(days=20) + timedelta(minutes=random.randint(1, 360)), 2, 2, "Повышенное давление"]
        insert_visit(apps, parameters)
        parameters = [2, 3, 1000]
        insert_sale(apps, parameters)

        parameters = [datetime.now() - timedelta(days=20) + timedelta(minutes=random.randint(1, 360)), 3, 3, "Сердечная недостаточность"]
        insert_visit(apps, parameters)
        parameters = [3, 4, 1000]
        insert_sale(apps, parameters)

        parameters = [datetime.now() - timedelta(days=20) + timedelta(minutes=random.randint(1, 360)), 4, 4, "Анемия"]
        insert_visit(apps, parameters)
        parameters = [4, 5, 1000]
        insert_sale(apps, parameters)

        parameters = [datetime.now() - timedelta(days=20) + timedelta(minutes=random.randint(1, 360)), 5, 5, "Гастрит"]
        insert_visit(apps, parameters)
        parameters = [5, 6, 1000]
        insert_sale(apps, parameters)

        parameters = [datetime.now() - timedelta(days=19) + timedelta(minutes=random.randint(1, 360)), 6, 6, "Простуда, ОРВИ"]
        insert_visit(apps, parameters)
        parameters = [6, 7, 1000]
        insert_sale(apps, parameters)

        parameters = [datetime.now() - timedelta(days=19) + timedelta(minutes=random.randint(1, 360)), 7, 7, "Повышенное давление"]
        insert_visit(apps, parameters)
        parameters = [7, 8, 1000]
        insert_sale(apps, parameters)

        parameters = [datetime.now() - timedelta(days=19) + timedelta(minutes=random.randint(1, 360)), 8, 8, "Сердечная недостаточность"]
        insert_visit(apps, parameters)
        parameters = [8, 9, 1000]
        insert_sale(apps, parameters)

        parameters = [datetime.now() - timedelta(days=19) + timedelta(minutes=random.randint(1, 360)), 9, 9, "Анемия"]
        insert_visit(apps, parameters)
        parameters = [9, 10, 1000]
        insert_sale(apps, parameters)

        parameters = [datetime.now() - timedelta(days=19) + timedelta(minutes=random.randint(1, 360)), 10, 10, "Гастрит"]
        insert_visit(apps, parameters)
        parameters = [10, 1, 1000]
        insert_sale(apps, parameters)

        parameters = [datetime.now() - timedelta(days=18) + timedelta(minutes=random.randint(1, 360)), 11, 1, "Простуда, ОРВИ"]
        insert_visit(apps, parameters)
        parameters = [11, 2, 1000]
        insert_sale(apps, parameters)

        parameters = [datetime.now() - timedelta(days=18) + timedelta(minutes=random.randint(1, 360)), 12, 2, "Повышенное давление"]
        insert_visit(apps, parameters)
        parameters = [12, 3, 1000]
        insert_sale(apps, parameters)

        parameters = [datetime.now() - timedelta(days=18) + timedelta(minutes=random.randint(1, 360)), 13, 3, "Сердечная недостаточность"]
        insert_visit(apps, parameters)
        parameters = [13, 4, 1000]
        insert_sale(apps, parameters)

        parameters = [datetime.now() - timedelta(days=18) + timedelta(minutes=random.randint(1, 360)), 14, 4, "Анемия"]
        insert_visit(apps, parameters)
        parameters = [14, 5, 1000]
        insert_sale(apps, parameters)

        parameters = [datetime.now() - timedelta(days=18) + timedelta(minutes=random.randint(1, 360)), 15, 5, "Гастрит"]
        insert_visit(apps, parameters)
        parameters = [15, 6, 1000]
        insert_sale(apps, parameters)

        parameters = [datetime.now() - timedelta(days=17) + timedelta(minutes=random.randint(1, 360)), 16, 6, "Простуда, ОРВИ"]
        insert_visit(apps, parameters)
        parameters = [16, 7, 1000]
        insert_sale(apps, parameters)

        parameters = [datetime.now() - timedelta(days=17) + timedelta(minutes=random.randint(1, 360)), 17, 7, "Повышенное давление"]
        insert_visit(apps, parameters)
        parameters = [17, 8, 1000]
        insert_sale(apps, parameters)

        parameters = [datetime.now() - timedelta(days=17) + timedelta(minutes=random.randint(1, 360)), 18, 8, "Сердечная недостаточность"]
        insert_visit(apps, parameters)
        parameters = [18, 9, 1000]
        insert_sale(apps, parameters)

        parameters = [datetime.now() - timedelta(days=17) + timedelta(minutes=random.randint(1, 360)), 19, 9, "Анемия"]
        insert_visit(apps, parameters)
        parameters = [19, 10, 1000]
        insert_sale(apps, parameters)

        parameters = [datetime.now() - timedelta(days=17) + timedelta(minutes=random.randint(1, 360)), 20, 10, "Гастрит"]
        insert_visit(apps, parameters)
        parameters = [20, 1, 1000]
        insert_sale(apps, parameters)

        print("Созданы Планируемые посещения")

    except Exception as error:
        print(error)

class Migration(migrations.Migration):

    dependencies = [
        ('center', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(new_data),        
    ]

